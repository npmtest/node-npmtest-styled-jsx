{"/home/travis/build/npmtest/node-npmtest-styled-jsx/test.js":"/* istanbul instrument in package npmtest_styled_jsx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-styled-jsx/lib.npmtest_styled_jsx.js":"/* istanbul instrument in package npmtest_styled_jsx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_styled_jsx = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_styled_jsx = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-styled-jsx/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-styled-jsx && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_styled_jsx */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_styled_jsx\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_styled_jsx.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_styled_jsx.rollup.js'] =\n            local.assetsDict['/assets.npmtest_styled_jsx.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_styled_jsx.__dirname + '/lib.npmtest_styled_jsx.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-styled-jsx/node_modules/styled-jsx/babel.js":"module.exports = require('./dist/babel')\n","/home/travis/build/npmtest/node-npmtest-styled-jsx/node_modules/styled-jsx/dist/babel.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); // Packages\n\n\n// Ours\n\n\nexports.default = function (_ref) {\n  var t = _ref.types;\n\n  var isGlobalEl = function isGlobalEl(el) {\n    return el.attributes.some(function (_ref2) {\n      var name = _ref2.name;\n      return name && name.name === GLOBAL_ATTRIBUTE;\n    });\n  };\n\n  var isStyledJsx = function isStyledJsx(_ref3) {\n    var el = _ref3.node;\n    return t.isJSXElement(el) && el.openingElement.name.name === 'style' && el.openingElement.attributes.some(function (attr) {\n      return attr.name.name === STYLE_ATTRIBUTE;\n    });\n  };\n\n  var findStyles = function findStyles(path) {\n    if (isStyledJsx(path)) {\n      var node = path.node;\n\n      return isGlobalEl(node.openingElement) ? [path] : [];\n    }\n\n    return path.get('children').filter(isStyledJsx);\n  };\n\n  // We only allow constants to be used in template literals.\n  // The following visitor ensures that MemberExpressions and Identifiers\n  // are not in the scope of the current Method (render) or function (Component).\n  var validateExpressionVisitor = {\n    MemberExpression: function MemberExpression(path) {\n      var node = path.node;\n\n      if (t.isThisExpression(node.object) && t.isIdentifier(node.property) && (node.property.name === 'props' || node.property.name === 'state')) {\n        throw path.buildCodeFrameError('Expected a constant ' + 'as part of the template literal expression ' + '(eg: <style jsx>{`p { color: ${myColor}`}</style>), ' + ('but got a MemberExpression: this.' + node.property.name));\n      }\n    },\n    Identifier: function Identifier(path, scope) {\n      var name = path.node.name;\n\n      if (scope.hasOwnBinding(name)) {\n        throw path.buildCodeFrameError('Expected `' + name + '` ' + 'to not come from the closest scope.\\n' + 'Styled JSX encourages the use of constants ' + 'instead of `props` or dynamic values ' + 'which are better set via inline styles or `className` toggling. ' + 'See https://github.com/zeit/styled-jsx#dynamic-styles');\n      }\n    }\n  };\n\n  var getExpressionText = function getExpressionText(expr) {\n    var node = expr.node;\n\n    // assume string literal\n    if (t.isStringLiteral(node)) {\n      return node.value;\n    }\n\n    var expressions = expr.get('expressions');\n\n    // simple template literal without expressions\n    if (expressions.length === 0) {\n      return node.quasis[0].value.cooked;\n    }\n\n    // Special treatment for template literals that contain expressions:\n    //\n    // Expressions are replaced with a placeholder\n    // so that the CSS compiler can parse and\n    // transform the css source string\n    // without having to know about js literal expressions.\n    // Later expressions are restored\n    // by doing a replacement on the transformed css string.\n    //\n    // e.g.\n    // p { color: ${myConstant}; }\n    // becomes\n    // p { color: ___styledjsxexpression0___; }\n\n    var replacements = expressions.map(function (e, id) {\n      return {\n        pattern: new RegExp('\\\\$\\\\{\\\\s*' + (0, _escapeStringRegexp2.default)(e.getSource()) + '\\\\s*\\\\}'),\n        replacement: '___styledjsxexpression_' + id + '___',\n        initial: '${' + e.getSource() + '}'\n      };\n    }).sort(function (a, b) {\n      return a.initial.length < b.initial.length;\n    });\n\n    var source = expr.getSource().slice(1, -1);\n\n    var modified = replacements.reduce(function (source, currentReplacement) {\n      source = source.replace(currentReplacement.pattern, currentReplacement.replacement);\n      return source;\n    }, source);\n\n    return {\n      source: source,\n      modified: modified,\n      replacements: replacements\n    };\n  };\n\n  var makeStyledJsxTag = function makeStyledJsxTag(id, transformedCss, isTemplateLiteral) {\n    var css = void 0;\n    if (isTemplateLiteral) {\n      // build the expression from transformedCss\n      (0, _babelTraverse2.default)((0, _babylon.parse)('`' + transformedCss + '`'), {\n        TemplateLiteral: function TemplateLiteral(path) {\n          if (!css) {\n            css = path.node;\n          }\n        }\n      });\n    } else {\n      css = t.stringLiteral(transformedCss);\n    }\n\n    return t.JSXElement(t.JSXOpeningElement(t.JSXIdentifier(STYLE_COMPONENT), [t.JSXAttribute(t.JSXIdentifier(STYLE_COMPONENT_ID), t.JSXExpressionContainer(t.numericLiteral(id))), t.JSXAttribute(t.JSXIdentifier(STYLE_COMPONENT_CSS), t.JSXExpressionContainer(css))], true), null, []);\n  };\n\n  return {\n    inherits: _babelPluginSyntaxJsx2.default,\n    visitor: {\n      JSXOpeningElement: function JSXOpeningElement(path, state) {\n        var el = path.node;\n\n        var _ref4 = el.name || {},\n            name = _ref4.name;\n\n        if (!state.hasJSXStyle) {\n          return;\n        }\n\n        if (state.ignoreClosing === null) {\n          // we keep a counter of elements inside so that we\n          // can keep track of when we exit the parent to reset state\n          // note: if we wished to add an option to turn off\n          // selectors to reach parent elements, it would suffice to\n          // set this to `1` and do an early return instead\n          state.ignoreClosing = 0;\n        }\n\n        if (name && name !== 'style' && name !== STYLE_COMPONENT && name.charAt(0) !== name.charAt(0).toUpperCase()) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = el.attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _name = _step.value.name;\n\n              if (!_name) {\n                continue;\n              }\n              if (_name === MARKUP_ATTRIBUTE || _name.name === MARKUP_ATTRIBUTE) {\n                // avoid double attributes\n                return;\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          var attr = t.jSXAttribute(t.JSXIdentifier(MARKUP_ATTRIBUTE), t.JSXExpressionContainer(t.numericLiteral(state.jsxId)));\n          el.attributes.push(attr);\n        }\n\n        state.ignoreClosing++;\n        // next visit will be: JSXElement exit()\n      },\n\n      JSXElement: {\n        enter: function enter(path, state) {\n          if (state.hasJSXStyle !== null) {\n            return;\n          }\n\n          var styles = findStyles(path);\n\n          if (styles.length === 0) {\n            return;\n          }\n\n          state.styles = [];\n\n          var scope = (path.findParent(function (path) {\n            return path.isFunctionDeclaration() || path.isArrowFunctionExpression() || path.isClassMethod();\n          }) || path).scope;\n\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = styles[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var style = _step2.value;\n\n              // compute children excluding whitespace\n              var children = style.get('children').filter(function (c) {\n                return t.isJSXExpressionContainer(c.node) ||\n                // ignore whitespace around the expression container\n                t.isJSXText(c.node) && c.node.value.trim() !== '';\n              });\n\n              if (children.length !== 1) {\n                throw path.buildCodeFrameError('Expected one child under ' + ('JSX Style tag, but got ' + style.children.length + ' ') + '(eg: <style jsx>{`hi`}</style>)');\n              }\n\n              var child = children[0];\n\n              if (!t.isJSXExpressionContainer(child)) {\n                throw path.buildCodeFrameError('Expected a child of ' + 'type JSXExpressionContainer under JSX Style tag ' + ('(eg: <style jsx>{`hi`}</style>), got ' + child.type));\n              }\n\n              var expression = child.get('expression');\n\n              if (!t.isTemplateLiteral(expression) && !t.isStringLiteral(expression)) {\n                throw path.buildCodeFrameError('Expected a template ' + 'literal or String literal as the child of the ' + 'JSX Style tag (eg: <style jsx>{`some css`}</style>),' + (' but got ' + expression.type));\n              }\n\n              // Validate MemberExpressions and Identifiers\n              // to ensure that are constants not defined in the closest scope\n              child.get('expression').traverse(validateExpressionVisitor, scope);\n\n              var styleText = getExpressionText(expression);\n              var styleId = (0, _stringHash2.default)(styleText.source || styleText);\n\n              state.styles.push([styleId, styleText, expression.node.loc]);\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          state.jsxId = (0, _stringHash2.default)(state.styles.map(function (s) {\n            return s[1].source || s[1];\n          }).join(''));\n          state.hasJSXStyle = true;\n          state.file.hasJSXStyle = true;\n          // next visit will be: JSXOpeningElement\n        },\n        exit: function exit(path, state) {\n          var isGlobal = isGlobalEl(path.node.openingElement);\n\n          if (state.hasJSXStyle && ! --state.ignoreClosing && !isGlobal) {\n            state.hasJSXStyle = null;\n          }\n\n          if (!state.hasJSXStyle || !isStyledJsx(path)) {\n            return;\n          }\n\n          // we replace styles with the function call\n\n          var _state$styles$shift = state.styles.shift(),\n              _state$styles$shift2 = _slicedToArray(_state$styles$shift, 3),\n              id = _state$styles$shift2[0],\n              css = _state$styles$shift2[1],\n              loc = _state$styles$shift2[2];\n\n          if (isGlobal) {\n            path.replaceWith(makeStyledJsxTag(id, css.source || css, css.modified));\n            return;\n          }\n\n          var useSourceMaps = Boolean(state.file.opts.sourceMaps);\n          var transformedCss = void 0;\n\n          if (useSourceMaps) {\n            var filename = state.file.opts.sourceFileName;\n            var generator = new _sourceMap.SourceMapGenerator({\n              file: filename,\n              sourceRoot: state.file.opts.sourceRoot\n            });\n            generator.setSourceContent(filename, state.file.code);\n            transformedCss = [(0, _styleTransform2.default)(String(state.jsxId), css.modified || css, generator, loc.start, filename), _convertSourceMap2.default.fromObject(generator).toComment({ multiline: true }), '/*@ sourceURL=' + filename + ' */'].join('\\n');\n          } else {\n            transformedCss = (0, _styleTransform2.default)(String(state.jsxId), css.modified || css);\n          }\n\n          if (css.modified) {\n            transformedCss = css.replacements.reduce(function (transformedCss, currentReplacement) {\n              transformedCss = transformedCss.replace(new RegExp(currentReplacement.replacement, 'g'), currentReplacement.initial);\n              return transformedCss;\n            }, transformedCss);\n          }\n\n          path.replaceWith(makeStyledJsxTag(id, transformedCss, css.modified));\n        }\n      },\n      Program: {\n        enter: function enter(path, state) {\n          state.hasJSXStyle = null;\n          state.ignoreClosing = null;\n          state.file.hasJSXStyle = false;\n        },\n        exit: function exit(_ref5, state) {\n          var node = _ref5.node,\n              scope = _ref5.scope;\n\n          if (!(state.file.hasJSXStyle && !scope.hasBinding(STYLE_COMPONENT))) {\n            return;\n          }\n\n          var importDeclaration = t.importDeclaration([t.importDefaultSpecifier(t.identifier(STYLE_COMPONENT))], t.stringLiteral('styled-jsx/style'));\n\n          node.body.unshift(importDeclaration);\n        }\n      }\n    }\n  };\n};\n\nvar _babelPluginSyntaxJsx = require('babel-plugin-syntax-jsx');\n\nvar _babelPluginSyntaxJsx2 = _interopRequireDefault(_babelPluginSyntaxJsx);\n\nvar _stringHash = require('string-hash');\n\nvar _stringHash2 = _interopRequireDefault(_stringHash);\n\nvar _sourceMap = require('source-map');\n\nvar _convertSourceMap = require('convert-source-map');\n\nvar _convertSourceMap2 = _interopRequireDefault(_convertSourceMap);\n\nvar _babelTraverse = require('babel-traverse');\n\nvar _babelTraverse2 = _interopRequireDefault(_babelTraverse);\n\nvar _babylon = require('babylon');\n\nvar _escapeStringRegexp = require('escape-string-regexp');\n\nvar _escapeStringRegexp2 = _interopRequireDefault(_escapeStringRegexp);\n\nvar _styleTransform = require('../lib/style-transform');\n\nvar _styleTransform2 = _interopRequireDefault(_styleTransform);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar STYLE_ATTRIBUTE = 'jsx';\nvar GLOBAL_ATTRIBUTE = 'global';\nvar MARKUP_ATTRIBUTE = 'data-jsx';\nvar STYLE_COMPONENT = '_JSXStyle';\nvar STYLE_COMPONENT_ID = 'styleId';\nvar STYLE_COMPONENT_CSS = 'css';","/home/travis/build/npmtest/node-npmtest-styled-jsx/node_modules/styled-jsx/lib/style-transform.js":"// based on Stylis (MIT)\n// modified by Guillermo Rauch to add support for custom\n// attributes instead of custom selector prefix\n/*!\n *\n *          __        ___\n *    _____/ /___  __/ (_)____\n *   / ___/ __/ / / / / / ___/\n *  (__  ) /_/ /_/ / / (__  )\n * /____/\\__/\\__, /_/_/____/\n *          /____/\n *\n * stylis is a small css compiler\n *\n * @licence MIT\n */\n(function (factory) {\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n        module.exports = factory(global);\n    } else if (typeof define === 'function' && define.amd) {\n        define(factory(window));\n    } else {\n        window.stylis = factory(window);\n    }\n}(function (window) {\n    'use strict';\n\n\n    // regular expressions\n    var regPrefixKey = /@(keyframes +.*?}$)/g;\n    var regPrefix    = /((?:transform|appearance):.*?;)/g;\n    var regSpaces    = /  +/g;\n    var regAnimation = /(,|:) +/g;\n    var regComments = /\\/\\*[^]*?\\*\\//g;\n\n    /**\n     * css compiler\n     *\n     * @example compiler('.class1', 'css...', false);\n     *\n     * @param  {string}  id to use for data attributes\n     * @param  {string}  styles\n     * @return {string}\n     */\n    function stylis (id, styles, generator, start, fileName) {\n        var suffix = '[data-jsx=\"' + id +'\"]';\n        var animationSuffix = Number(id[0]) == id[0]\n          ? `a${id}` /* starting with a digit requires a prefix to generate valid animation names */\n          : id\n\n        var output = '';\n        var line = '';\n\n        // strip out comments\n        styles = styles.replace(regComments, '')\n\n        var len = styles.length;\n        var i = 0;\n        var lineNumber = start ? start.line : 0;\n        var columnNumber = start ? start.column : 0;\n\n        generator && generator.addMapping({\n          generated: {\n            line: 1,\n            column: 0\n          },\n          source: fileName,\n          original: start\n        })\n\n        // parse + compile\n        while (i < len) {\n            var code = styles.charCodeAt(i);\n\n            if (code === 10) {\n              lineNumber++;\n              columnNumber = 0;\n            }\n\n            // {, }, ; characters\n            if (code === 123 || code  === 125 || code === 59) {\n                line += styles[i];\n\n                var first = line.charCodeAt(0);\n\n                // only trim when the first character is ` `\n                if (first === 32) {\n                    first = (line = line.trim()).charCodeAt(0);\n                }\n\n                // / character, line comment\n                if (first === 47) {\n                    line = code === 125 ? '}' : '';\n                }\n                // @ character, special block\n                else if (first === 64) {\n                    var second = line.charCodeAt(1) || 0;\n\n                    // @keyframe/@root, `k` or @root, `r` character\n                    if (second === 107 || second === 114) {\n                        i++;\n                        columnNumber++;\n\n                        if (second == 107) {\n                            // @keyframes\n                            line = line.substring(1, 11) + animationSuffix + line.substring(11);\n                        } else {\n                            // @root\n                            line = '';\n                        }\n\n                        var close = 0;\n\n                        while (i < len) {\n                            var char = styles[i++];\n                            columnNumber++;\n                            var _code = char.charCodeAt(0);\n                            if (_code === 10) {\n                              lineNumber++;\n                              columnNumber = 0;\n                            }\n\n                            // not `\\t`, `\\r`, `\\n` characters\n                            if (_code !== 9 && _code !== 13 && _code !== 10) {\n                                // } character\n                                if (_code === 125) {\n                                    // previous block tag is close\n                                    if (close === 1) {\n                                        break;\n                                    }\n                                    // current block tag is close tag\n                                    else {\n                                        close = 1;\n                                    }\n                                }\n                                // { character\n                                else if (_code === 123) {\n                                    // current block tag is open\n                                    close = 0;\n                                }\n\n                                line += char;\n                            }\n                        }\n\n                        // vendor prefix transform properties within keyframes and @root blocks\n                        line = line.replace(regSpaces, '').replace(regPrefix, '-webkit-$1-moz-$1-ms-$1$1');\n\n                        if (second === 107) {\n                            // vendor prefix keyframes blocks\n                            line = '@-webkit-'+line+'}'+'@-moz-'+line+'}@'+line+'}';\n                        } else {\n                            // vendor prefix keyframes in @root block\n                            line = line.replace(regPrefixKey, '@-webkit-$1}@-moz-$1}@$1}');\n                        }\n                    }\n                } else {\n                    var second = line.charCodeAt(1) || 0;\n                    var third = line.charCodeAt(2) || 0;\n\n                    // animation: a, n, i characters\n                    if (first === 97 && second === 110 && third === 105) {\n                      line = line.substring(0, line.length-1);\n\n                      var ninth = line.charCodeAt(9) || 0;\n                      var tenth = line.charCodeAt(10) || 0;\n\n                      var colon = line.indexOf(':')+1;\n                      var build = line.substring(0, colon);\n\n                      // short hand animation syntax\n                      if (ninth !== 45) {\n                        var anims = line.substring(colon).trim().split(',');\n                          \n                        // because we can have multiple animations `animation: slide 4s, slideOut 2s`\n                        for (var j = 0, length = anims.length; j < length; j++) {\n                          var anim = anims[j];\n                          var props = anim.split(' ');\n\n                          // since we can't be sure of the position of the name of the animation name\n                          // we have to find it\n                          for (var k = 0, l = props.length; k < l; k++) {\n                            var prop = props[k].trim();\n\n                            // animation name is anything not in this list\n                            if (\n                              prop &&\n                              prop !== 'infinite' &&\n                              prop !== 'linear' &&\n                              prop !== 'alternate' &&\n                              prop !== 'normal' &&\n                              prop !== 'forwards' &&\n                              prop !== 'backwards' &&\n                              prop !== 'both' &&\n                              prop !== 'none' &&\n                              prop !== 'ease' &&\n                              prop.indexOf('cubic-bezier(') === -1 &&\n                              prop.indexOf('ease-') === -1 &&\n                              isNaN(parseInt(prop))\n                            ) {\n                              props[k] = animationSuffix+prop;\n                              anim = props.join(' ');\n                            }\n                          }\n\n                          build += (j === 0 ? '' : ',') + anim.trim();\n                        }\n                      }\n                      // explicit syntax \n                      else {\n                        // n\n                        build += (tenth !== 110 ? '' : animationSuffix) + line.substring(colon).trim()\n                      }\n\n                      build += ';';\n\n                      // vendor prefix\n                      line = '-webkit-' + build + '-moz-' + build + build;\n                    }\n                    // appearance: a, p, p\n                    // flex: f, l, e\n                    // order: o, r, d\n                    else if (\n                        (first === 97 && second === 112 && third === 112) ||\n                        (first === 102 && second === 108 && third === 101) ||\n                        (first === 111 && second === 114 && third === 100)\n                    ) {\n                        // vendor prefix\n                        line = '-webkit-' + line + '-moz-' + line + line;\n                    }\n                    // transforms & transitions: t, r, a\n                    // hyphens: h, y, p\n                    // user-select: u, s, r, s\n                    else if (\n                        (first === 116 && second === 114 && third === 97) ||\n                        (first === 104 && second === 121 && third === 112) ||\n                        (first === 117 && second === 115 && third === 101 && line.charCodeAt(5) === 115)\n                    ) {\n                        // vendor prefix\n                        line = '-webkit-' + line + '-moz-' + line + '-ms-' + line + line;\n                    }\n                    // display: d, i, s\n                    else if (first === 100 && second === 105 && third === 115) {\n                      const flexIndex = line.indexOf('flex')\n                      if (flexIndex > -1) {\n                        const flexValue = line.charAt(flexIndex-1) === '-' ? 'inline-flex' : 'flex'\n                        line = 'display:-webkit-'+flexValue+'; display:'+flexValue+';'\n                      }\n                    }\n\n                    else {\n                        // selector declaration\n                        if (code === 123) {\n                            var split = line.split(',');\n                            var _line = '';\n\n                            // iterate through characters and prefix multiple selectors with namesapces\n                            // i.e h1, h2, h3 --> [namespace] h1, [namespace] h1, ....\n                            for (var j = 0, length = split.length; j < length; j++) {\n                                var selector = split[j].trim();\n                                var isLast = selector[selector.length - 1] === '{';\n                                if (isLast) {\n                                  // trim {\n                                  selector = selector.substr(0, selector.length - 1);\n                                }\n\n                                var piece = ''\n                                var inGlobal = false\n                                var inSubSelector = false\n                                var inQuotes = false\n                                var inCombinatorOrPseudo = false\n                                var quoteChar = null\n\n                                for (var k = 0; k < selector.length; k++) {\n                                  var chr = selector[k]\n\n                                  if (inQuotes) {\n                                    if (chr === quoteChar) {\n                                      inQuotes = false\n                                      quoteChar = null\n                                    }\n                                    piece += chr\n                                    continue\n                                  } else {\n                                    var prev = selector[k-1]\n                                    if ((chr === '\"' || chr === \"'\") && prev !== '\\\\') {\n                                      inQuotes = true\n                                      quoteChar = chr\n                                      piece += chr\n                                      continue\n                                    } else {\n                                      if (inGlobal) {\n                                        if (inSubSelector) {\n                                          if (')' === chr) {\n                                            inSubSelector = false\n                                          }\n                                          piece += chr\n                                          continue\n                                        } else {\n                                          if (' ' === chr) {\n                                            inGlobal = false\n                                            // we omit the suffix\n                                            _line += piece + ' '\n                                            piece = ''\n                                            continue\n                                          } else if (')' === chr) {\n                                            // ignore this char\n                                            continue\n                                          } else if ('(' === chr) {\n                                            inSubSelector = true\n                                          }\n                                          piece += chr\n                                          continue\n                                        }\n                                      } else if (inCombinatorOrPseudo) {\n                                        if (' ' === chr) {\n                                          inCombinatorOrPseudo = false\n                                          _line += piece + ' '\n                                          piece = ''\n                                        } else {\n                                          piece += chr\n                                        }\n                                      } else {\n                                        // potential beginning of :global()\n                                        if (chr === ':'\n                                          && piece === ''\n                                          && selector.substr(k, 8) === ':global(' ) {\n                                          inGlobal = true\n                                          k += 7\n                                          continue\n                                        }\n\n                                        if (chr === ' ') {\n                                          if (piece === '') {\n                                            // ignore\n                                            continue\n                                          } else {\n                                            _line += piece + suffix + ' '\n                                            piece = ''\n                                          }\n                                        } else if (chr === ':') {\n                                          // pseudo-class or preudo-element\n                                          _line += piece + suffix\n                                          piece = chr\n                                          inCombinatorOrPseudo = true\n                                        } else if (chr === '+' || chr === '~' || chr === '>') {\n                                          // combinators\n                                          piece += chr\n                                          inCombinatorOrPseudo = true\n                                        } else {\n                                          piece += chr\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n\n                                // flush remainder\n                                if (piece.length) {\n                                  _line += piece\n                                  if (!inGlobal && !inCombinatorOrPseudo) {\n                                    _line += suffix\n                                  }\n                                }\n\n                                if (isLast) {\n                                  _line += '{'\n                                } else {\n                                  _line += ','\n                                }\n                            }\n\n                            line = _line;\n                        }\n                    }\n                }\n\n                generator && generator.addMapping({\n                    generated: {\n                      line: 1,\n                      column: output.length\n                    },\n                    source: fileName,\n                    original: {\n                        line: lineNumber,\n                        column: columnNumber\n                    }\n                })\n\n                output += line;\n                line = '';\n            }\n            // not `\\t`, `\\r`, `\\n` characters\n            else if (code !== 9 && code !== 13 && code !== 10) {\n                line += styles[i];\n            }\n\n            // next character\n            i++;\n            columnNumber++;\n        }\n\n        return output;\n    }\n\n    return stylis;\n}));\n","/home/travis/build/npmtest/node-npmtest-styled-jsx/node_modules/styled-jsx/server.js":"module.exports = require('./dist/server')\n","/home/travis/build/npmtest/node-npmtest-styled-jsx/node_modules/styled-jsx/dist/server.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = flushToReact;\nexports.flushToHTML = flushToHTML;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _style = require('./style');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction flushToReact() {\n  var mem = (0, _style.flush)();\n  var arr = [];\n  for (var id in mem) {\n    if (hasOwnProperty.call(mem, id)) {\n      arr.push(_react2.default.createElement('style', {\n        id: '__jsx-style-' + id,\n        // avoid warnings upon render with a key\n        key: '__jsx-style-' + id,\n        dangerouslySetInnerHTML: {\n          __html: mem[id]\n        }\n      }));\n    }\n  }\n  return arr;\n}\n\nfunction flushToHTML() {\n  var mem = (0, _style.flush)();\n  var html = '';\n  for (var id in mem) {\n    if (hasOwnProperty.call(mem, id)) {\n      html += '<style id=\"__jsx-style-' + id + '\">' + mem[id] + '</style>';\n    }\n  }\n  return html;\n}","/home/travis/build/npmtest/node-npmtest-styled-jsx/node_modules/styled-jsx/dist/style.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.flush = flush;\n\nvar _react = require('react');\n\nvar _render = require('./render');\n\nvar _render2 = _interopRequireDefault(_render);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar update = typeof window === 'undefined' ? doRender : updateOnClient;\nvar components = [];\nvar updatePromise = void 0;\n\n// includes desktop and iOS, based on\n// https://github.com/DamonOehlman/detect-browser/blob/master/lib/detectBrowser.js\nvar isSafari = typeof window === 'undefined' ? false : /Version\\/[0-9._]+.*Safari/.test(window.navigator.userAgent);\n\nvar _class = function (_Component) {\n  _inherits(_class, _Component);\n\n  function _class() {\n    _classCallCheck(this, _class);\n\n    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n  }\n\n  _createClass(_class, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      mount(this);\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate() {\n      update();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      unmount(this);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return _class;\n}(_react.Component);\n\nexports.default = _class;\nfunction flush() {\n  var ret = {};\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var props = _step.value.props;\n\n      ret[props.styleId] = props.css;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  components = [];\n\n  return ret;\n}\n\nfunction mount(component) {\n  components.push(component);\n  update();\n}\n\nfunction unmount(component) {\n  var i = components.indexOf(component);\n  if (i < 0) {\n    return;\n  }\n\n  components.splice(i, 1);\n  update();\n}\n\nfunction updateOnClient() {\n  if (isSafari) {\n    // debouncing causes FOUC in Safari\n    doRender();\n    return;\n  }\n\n  // Debounce calls and only render once the latest promise resolves.\n  // Promise#then() ensures micro task enqueuing of styles update before paint.\n  var promise = updatePromise = Promise.resolve().then(function () {\n    if (promise === updatePromise) {\n      updatePromise = null;\n      doRender();\n    }\n  });\n}\n\nfunction doRender() {\n  (0, _render2.default)(components);\n}","/home/travis/build/npmtest/node-npmtest-styled-jsx/node_modules/styled-jsx/dist/render.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _object = require('object.entries');\n\nvar _object2 = _interopRequireDefault(_object);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar tags = {};\nvar prevStyles = {};\n\nexports.default = typeof window === 'undefined' ? renderOnServer : renderOnClient;\n\n\nfunction renderOnServer() {}\n\nfunction renderOnClient(components) {\n  var styles = {};\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var c = _step.value;\n\n      styles[c.props.styleId] = c;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  patch(diff(prevStyles, styles));\n\n  prevStyles = styles;\n}\n\nfunction diff(a, b) {\n  var added = (0, _object2.default)(b).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        k = _ref2[0];\n\n    return !hasOwnProperty.call(a, k);\n  });\n  var removed = (0, _object2.default)(a).filter(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        k = _ref4[0];\n\n    return !hasOwnProperty.call(b, k);\n  });\n  return [added, removed];\n}\n\nvar fromServer = {};\n\nfunction patch(_ref5) {\n  var _ref6 = _slicedToArray(_ref5, 2),\n      added = _ref6[0],\n      removed = _ref6[1];\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = added[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n          id = _step2$value[0],\n          c = _step2$value[1];\n\n      // avoid duplicates from server-rendered markup\n      if (undefined === fromServer[id]) {\n        fromServer[id] = document.getElementById('__jsx-style-' + id);\n      }\n\n      tags[id] = fromServer[id] || makeStyleTag(c.props.css);\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = removed[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _step3$value = _slicedToArray(_step3.value, 1),\n          id = _step3$value[0];\n\n      var t = tags[id];\n      delete tags[id];\n      t.parentNode.removeChild(t);\n      // avoid checking the DOM later on\n      fromServer[id] = null;\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n}\n\nfunction makeStyleTag(str) {\n  // based on implementation by glamor\n  var tag = document.createElement('style');\n  tag.appendChild(document.createTextNode(str));\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  head.appendChild(tag);\n\n  return tag;\n}","/home/travis/build/npmtest/node-npmtest-styled-jsx/node_modules/styled-jsx/style.js":"module.exports = require('./dist/style')\n"}